description: >
  Runs the integration tests suite.
  This run does not handle installation of the module

parameters:
  docker_username:
    type: env_var_name
    default: DOCKERHUB_LOGIN
    description: "Docker registry Username"
  docker_password:
    type: env_var_name
    default: DOCKERHUB_PASSWORD
    description: "Docker registry Password"
  docker_compose_file:
    type: string
    default: "docker-compose.yml"
    description: "Filename for docker-compose yaml file"
  tests_folder:
    type: string
    default: "tests/"
    description: "Folder containing the docker-compose.yml"
  tests_manifest:
    type: string
    description: "Manifest contraining the provisioning script"
  jahia_image:
    type: string
    default: ""
    description: "Full path to a Jahia image (org/repo:tag)"
  jahia_container_name:
    type: string
    default: "jahia"
    description: "Name of the Jahia container in docker-compose file"
  tests_image:
    type: string
    default: ""
    description: "Full path to the Tests image (org/repo:tag)"
  tests_container_name:
    type: string
    default: "cypress"
    description: "Name of the tests container in docker-compose file"
  jahia_license:
    type: env_var_name
    default: JAHIA_LICENSE_801_FULL
    description: "Base64 encoded License"
  jcustomer_image:
    type: string
    default: ""
    description: "Full path to a JCustomer image (org/repo:tag)"
  mariadb_image:
    type: string
    default: "library/mariadb:10-focal"
    description: "Full path to a MariaDB image (org/repo:tag)"
  elasticsearch_image:
    type: string
    default: "docker.elastic.co/elasticsearch/elasticsearch:7.10.2"
    description: "Full path to an Elasticsearch image (org/repo:tag)"
  other_containers_start:
    type: string
    default: ""
    description: "List of containers to be started"
  other_containers_delay:
    type: string
    default: "0"
    description: "Delay before start those containers"
  module_id:
    type: string
    description: "ID of the module"
  should_skip_testrail:
    type: boolean
    default: true
    description: "Should the submission to Testrail be skipped ?"
  should_skip_notifications:
    type: boolean
    default: true
    description: "Should slack notifications be skipped ?"
  slack_webhook_notifications:
    type: env_var_name
    default: SLACK_WEBHOOK_QA_NOTIFICATIONS
    description: "Webhook to be used for failyre notifications"
  slack_webhook_notifications_all:
    type: env_var_name
    default: SLACK_WEBHOOK_QA_NOTIFICATIONS_ALL
    description: "Webhook to be used for all notifications (failure and success)"
  should_skip_zencrepes:
    type: boolean
    default: false
    description: "Should zencrepes notifications be skipped ?"
  zencrepes_secret:
    type: env_var_name
    default: ZENCREPES_WEBHOOK_SECRET
    description: "ZenCrepes Webhook secret"
  testrail_project:
    type: string
    default: "Default"
    description: "Testrail Project to send data to"
  testrail_milestone:
    type: string
    default: "Default"
    description: "Milestone to be used when submitting the results to Testrail"
  testrail_username:
    type: env_var_name
    default: TESTRAIL_USERNAME
    description: "Testrail Username"
  testrail_password:
    type: env_var_name
    default: TESTRAIL_PASSWORD
    description: "Testtrail Password"

steps:
  - setup_remote_docker:
      docker_layer_caching: true
  - run:
      name: Set environment variables from parameters
      command: |
        echo "export MANIFEST=<< parameters.tests_manifest >>" >> $BASH_ENV
        echo "export JAHIA_IMAGE=<< parameters.jahia_image >>" >> $BASH_ENV
        echo "export JAHIA_LICENSE=<< parameters.jahia_license >>" >> $BASH_ENV
        echo "export TESTS_IMAGE=<< parameters.tests_image >>" >> $BASH_ENV
        echo "export JCUSTOMER_IMAGE=<< parameters.jcustomer_image >>" >> $BASH_ENV
        echo "export ELASTICSEARCH_IMAGE=<< parameters.elasticsearch_image >>" >> $BASH_ENV
  - run:
      name: Preparing exportfolder
      command: |
        if [ ! -d << parameters.tests_folder >>artifacts ]; then
          mkdir -p << parameters.tests_folder >>artifacts
        fi
  - run:
      name: Docker login
      command: |
        echo "${<< parameters.docker_username >>}"
        echo "${<< parameters.docker_password >>}" | docker login -u "${<< parameters.docker_username >>}" --password-stdin
  - run:
      name: Spin-up the base Jahia container
      command: |
        cd << parameters.tests_folder >>
        docker-compose -f << parameters.docker_compose_file >> up -d << parameters.jahia_container_name >>
  - run:
      name: Spin-up the additional containers (if provided using other_containers_start)
      command: |
        if [[ << parameters.other_containers_start >>" != "" ]]; then
          cd << parameters.tests_folder >>
          sleep << parameters.other_containers_delay >>
          docker-compose -f << parameters.docker_compose_file >> up -d << parameters.other_containers_start >>
        fi
  - run:
      name: Spin-up the test container
      command: |
        cd << parameters.tests_folder >>
        export DOCKER_CLIENT_TIMEOUT=120
        export COMPOSE_HTTP_TIMEOUT=120
        docker-compose -f << parameters.docker_compose_file >> up << parameters.tests_container_name >>
        docker cp << parameters.tests_container_name >>:/home/jahians/results ./artifacts
  - run:
      name: Export logs
      when: always
      command: |
        cd << parameters.tests_folder >>
        docker logs << parameters.tests_container_name >> > ./artifacts/results/<< parameters.tests_container_name >>.log
        docker logs << parameters.jahia_container_name >> > ./artifacts/results/<< parameters.jahia_container_name >>.log
        docker-compose logs -t --tail="all" > ./artifacts/results/all-containers.log

  # This fetches data about the running Jahia (jahia versions, module version, ...)
  # This is useful as an artifact but also used by the slack and zencrepes reporters to
  # Populate the data they're sending
  - run:
      name: Fetch module dependencies
      when: always
      command: |
        cd << parameters.tests_folder >>
        sudo npm install -g jahia-reporter
        ssh -4 -f -L 8080:localhost:8080 remote-docker sleep 5
        jahia-reporter utils:modules \
          --moduleId="<< parameters.module_id >>" \
          --filepath="artifacts/results/installed-jahia-modules.json"
  # This is not needed since cypress is going to terminat on failure with exit code 1
  - run:
      name: Analyze Test results
      when: always
      # This looks at the report and fail the job if one of the test has failed
      command: |
        cd << parameters.tests_folder >>
        if [[ ! -e ./artifacts/results/test_success ]]; then
          echo "More than one failure found, sending exit signal"
          exit 1
        fi
  - store_test_results:
      path: << parameters.tests_folder >>artifacts/results/xml_reports
  - run:
      name: remove xml results folder
      when: always
      command: rm -rf << parameters.tests_folder >>artifacts/results/xml_reports
  - store_artifacts:
      path: << parameters.tests_folder >>artifacts/results
  # Once all is executed, results are submitted to external platforms
  # Testrail report and Slack (failure only) notifications are sent during scheduled executions or merged into the main branch
  - run:
      name: Publish results to testrail
      when: always
      command: |
        if [ << parameters.should_skip_testrail >> == false ]; then
          cd << parameters.tests_folder >>
          jahia-reporter testrail \
            --testrailUsername=${<< parameters.testrail_username >>} \
            --testrailPassword=${<< parameters.testrail_password >>} \
            --sourcePath="artifacts/results/reports" \
            --sourceType="json" \
            --projectName="<< parameters.testrail_project >>" \
            --milestone="<< parameters.testrail_milestone >>" \
            --defaultRunDescription="This test was executed on circleci, $CIRCLE_BUILD_URL"
        fi
  - run:
      name: Send Notifications to Slack
      when: always
      command: |
        if [ << parameters.should_skip_notifications >> == false ]; then
          cd << parameters.tests_folder >>
          jahia-reporter slack \
            --webhook=${<< parameters.slack_webhook_notifications >>} \
            --webhookAll=${<< parameters.slack_webhook_notifications_all >>} \
            --skipSuccessful \
            --sourcePath="artifacts/results/reports" \
            --sourceType="json" \
            --moduleFilepath="artifacts/results/installed-jahia-modules.json" \
            --msgAuthor="CircleCI ($CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME)" \
            --runUrl=$CIRCLE_BUILD_URL
        fi
  - run:
      name: Send Test data to https://zencrepes.jahia.com
      when: always
      command: |
        if [ << parameters.should_skip_zencrepes >> == true ]; then
          cd << parameters.tests_folder >>
          jahia-reporter zencrepes \
            --webhook="https://zencrepes.jahia.com/zqueue/testing/webhook" \
            --webhookSecret=${<< parameters.zencrepes_secret >>} \
            --sourcePath="artifacts/results/reports" \
            --sourceType="json" \
            --moduleFilepath="artifacts/results/installed-jahia-modules.json" \
            --name="<< parameters.module_id >>" \
            --runUrl=$CIRCLE_BUILD_URL
        fi
