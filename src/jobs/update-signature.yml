# TODO BACKLOG-16625 use the command for updating the module signature
description: >
  Update Jahia module signature in the pom.xml file

parameters:
  resource_class:
    type: string
    default: "small"
    description: "CircleCI resource_class (small, medium, large, xlarge, ...)"
  base_image:
    type: string
    default: "cimg/openjdk:8.0.302-node"
    description: "Base docker image to be used for running the job"
  working_directory:
    type: string
    default: "~/source"
    description: "Working directory for the job"
  ssh_key_fingerprints:
    type: string
    description: "Module fingerprints"
  git_user_email:
    type: string
    default: "jahia-ci@jahia.com"
    description: "Git user email"
  git_user_name:
    type: string
    default: "Jahia CI"
    description: "Git user name"
  nexus_enterprise_releases_url:
    type: env_var_name
    default: NEXUS_ENTERPRISE_RELEASES_URL
    description: "Nexus Enterprise release URL"
  nexus_username:
    type: env_var_name
    default: NEXUS_USERNAME
    description: "Nexus Username"
  nexus_password:
    type: env_var_name
    default: NEXUS_PASSWORD
    description: "Nexus Password"
  keymaker_location:
    type: string
    default: "org/jahia/keymaker/keymaker-cli"
    description: "Location of the keymaker"
  keymaker_version:
    type: string
    default: "2.0"
    description: "Version of the keymaker"
  keymaker_name:
    type: string
    default: "keymaker-cli"
    description: "Name of the keymaker (id)"

working_directory: << parameters.working_directory >>

resource_class: << parameters.resource_class >>

docker:
  - image: << parameters.base_image >>

steps:
  - checkout
  - add_ssh_keys:
      fingerprints:
        - << parameters.ssh_key_fingerprints >>
  - run:
      name: Setting up github configuration
      command: |
        mkdir -p ~/.ssh
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        git config user.email << parameters.git_user_email >>
        git config user.name << parameters.git_user_name >>
  - run:
      name: Getting latest changes from the remote branch
      command: |
        echo "Handling if this job was re-ran"
        git fetch --all
        git pull origin $CIRCLE_BRANCH --quiet
  - run:
      name: Downloading keymaker artifacts
      command: |
        mkdir -p target/keymaker
        url="${<< parameters.nexus_enterprise_releases_url >>}/content/<< parameters.keymaker_location >>/<< parameters.keymaker_version >>/<< parameters.keymaker_name >>-<< parameters.keymaker_version >>-jar-with-dependencies.jar"
        curl --header "Authorization: Basic $(echo -n "${<< parameters.nexus_username >>}:${<< parameters.nexus_password >>}" | base64)" \
            --url "${url}" \
            --output "target/keymaker/<< parameters.keymaker_name >>.jar"
        KEYMAKER_CLI_JAR="$(pwd)/target/keymaker/<< parameters.keymaker_name >>.jar"
        echo "export KEYMAKER_CLI_JAR=${KEYMAKER_CLI_JAR}" >> $BASH_ENV
        . $BASH_ENV
  - run:
      name: Handling signature update for single or multiple submodules
      command: |
        root_dir=$(pwd)
        packaging_type=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout | xargs)
        echo "Packaging type: ${packaging_type}"
        if [[ ${packaging_type} == "pom" ]]; then
          mvn clean install
          project_modules=($(mvn -q --also-make exec:exec -Dexec.executable="pwd"))
          for module in ${project_modules[@]:1}; do
            if [[ ${module} != ${root_dir} ]]; then
              cd $module
              group_id=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout | xargs)
              parent_group_id=$(mvn help:evaluate -Dexpression=project.parent.groupId -q -DforceStdout | xargs)
              project_name=$(mvn help:evaluate -Dexpression=project.name -q -DforceStdout | xargs)
              packaging_type=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout | xargs | xargs)
              if [[ ${packaging_type} == "bundle" ]]; then
                KEYMAKER_CLI_OUTPUT=`java -jar ${KEYMAKER_CLI_JAR} pom -f pom.xml -s`
                if [[ ${group_id} == "org.jahia.modules" || ${parent_group_id} == "org.jahia.modules" ]]; then
                  if [[ $(echo $KEYMAKER_CLI_OUTPUT | grep -w "Signature valid" | wc -l) != "1" ]]; then
                    sed -i -e "s%<\(.*\)Jahia-Signature>.*</%<\1Jahia-Signature>${KEYMAKER_CLI_OUTPUT}</%" pom.xml
                    sed -i -e "s%<\(.*\)jahia-module-signature>.*</%<\1jahia-module-signature>${KEYMAKER_CLI_OUTPUT}</%" pom.xml
                    git add pom.xml && git commit -m "[ci skip] Update signature for ${project_name}"
                    git push -u origin ${CIRCLE_BRANCH}
                  else
                    echo "Signature is up-to-date."
                  fi
                else
                  echo "This project is not a Jahia module."
                fi
              else
                echo "Ignoring project ${project_name} b/c it's a ${packaging_type} packaging type"
              fi
              cd -
            fi
          done
        else
          echo "There are no submodules in this project"
        fi
  - run:
      name: Handling signature for a single module
      command: |
        packaging_type=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout | xargs)
        echo "Packaging type: ${packaging_type}"
        if [[ ${packaging_type} == "bundle" ]]; then
          group_id=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout | xargs)
          parent_group_id=$(mvn help:evaluate -Dexpression=project.parent.groupId -q -DforceStdout | xargs)
          project_name=$(mvn help:evaluate -Dexpression=project.name -q -DforceStdout | xargs)
          if [[ ${group_id} != "org.jahia.modules" && ${parent_group_id} != "org.jahia.modules" ]]; then
            echo "Project is not a Jahia modules"
            circleci-agent step halt
          else
            KEYMAKER_CLI_OUTPUT=`java -jar ${KEYMAKER_CLI_JAR} pom -f pom.xml -s`
            if [[ $(echo $KEYMAKER_CLI_OUTPUT | grep -w "Signature valid" | wc -l) == "1" ]]; then
              echo "Signature is already up-to-date"
              circleci-agent step halt
            else
              echo "New signature: ${KEYMAKER_CLI_OUTPUT}"
              sed -i -e "s%<\(.*\)Jahia-Signature>.*</%<\1Jahia-Signature>${KEYMAKER_CLI_OUTPUT}</%" pom.xml
              sed -i -e "s%<\(.*\)jahia-module-signature>.*</%<\1jahia-module-signature>${KEYMAKER_CLI_OUTPUT}</%" pom.xml
              git add pom.xml && git commit -m "[ci skip] Updated signature for ${project_name}"
              git push -u origin ${CIRCLE_BRANCH}
            fi
          fi
        else
          echo "There are submodule(s) in this projects"
        fi
