description: >
  Runs the integration testing suite on a machine executor
  At the end of its execution, the test container must contain a folder at: /home/jahians/results, this folder must contain:
   - A marker file (test_success or test_failure) indicating the outcome of the run
   - Run reports, in json format, in a reports/ folder
   - Run reports, in XML format, in a xml_reports/ folder
   - A installed-jahia-modules.json generated by jahia-reporter and containing installed modules
  The job supports start and stop scripts that would be executed in-lieu of docker-compose up.
  This optional approach is useful if there is a need to spin-up complex cluster environments.

parameters:
  resource_class:
    type: string
    default: "xlarge"
    description: "CircleCI resource_class (small, medium, large, xlarge, ...)"
  machine_image:
    type: string
    default: "ubuntu-2004:202107-02"
    description: "Ubuntu image to run on the machine as per https://circleci.com/docs/2.0/configuration-reference/#available-machine-images"
  working_directory:
    type: string
    default: "~/source"
    description: "Working directory for the job"
  primary_release_branch:
    type: string
    default: "main"
    description: "Primary release branch"
  nexus_username:
    type: env_var_name
    default: NEXUS_USERNAME
    description: "Nexus Username"
  nexus_password:
    type: env_var_name
    default: NEXUS_PASSWORD
    description: "Nexus Password"
  docker_username:
    type: env_var_name
    default: DOCKERHUB_LOGIN
    description: "Docker registry Username"
  docker_password:
    type: env_var_name
    default: DOCKERHUB_PASSWORD
    description: "Docker registry Password"
  docker_compose_file:
    type: string
    default: "docker-compose.yml"
    description: "Filename for docker-compose yaml file"
  tests_path:
    type: string
    default: "tests/"
    description: "Folder containing the docker-compose.yml"
  tests_manifest:
    type: string
    description: "Manifest contraining the provisioning script"
  jahia_image:
    type: string
    default: ""
    description: "Full path to a Jahia image (org/repo:tag)"
  jahia_superuser_password:
    type: string
    default: "root1234"
    description: "Jahia root password"
  jahia_cluster_enabled:
    type: boolean
    default: false
    description: "Run Jahia in cluster mode"
  tests_image:
    type: string
    default: "modules-tests"
    description: "Full path to the Tests image (org/repo:tag)"
  tests_container_name:
    type: string
    default: "cypress"
    description: "Name of the tests container in the docker-compose file"
  tests_container_branch:
    type: string
    default: ""
    description: "Branch containing the tests (if different from current)"
  jahia_license:
    type: env_var_name
    default: JAHIA_LICENSE_8x_FULL
    description: "Base64 encoded License"
  jcustomer_image:
    type: string
    default: ""
    description: "Full path to a JCustomer image (org/repo:tag)"
  elasticsearch_image:
    type: string
    default: "docker.elastic.co/elasticsearch/elasticsearch:7.10.2"
    description: "Full path to an Elasticsearch image (org/repo:tag)"
  module_id:
    type: string
    description: "ID of the module"
  should_skip_artifacts:
    type: boolean
    default: false
    description: "Should build artifacts be copied in the test container"
  should_skip_testrail:
    type: boolean
    default: true
    description: "Should the submission to Testrail be skipped ?"
  should_skip_notifications:
    type: boolean
    default: true
    description: "Should slack notifications be skipped ?"
  slack_webhook_notifications:
    type: env_var_name
    default: SLACK_WEBHOOK_QA_NOTIFICATIONS
    description: "Webhook to be used for failure notifications"
  slack_webhook_notifications_all:
    type: env_var_name
    default: SLACK_WEBHOOK_QA_NOTIFICATIONS_ALL
    description: "Webhook to be used for all notifications (failure and success)"
  should_skip_zencrepes:
    type: boolean
    default: false
    description: "Should zencrepes notifications be skipped ?"
  should_build_testsimage:
    type: boolean
    default: true
    description: "Should the orb attend to build the test image"
  incident_service:
    type: string
    default: ""
    description: "Default to Module ID, name of the Test Service to use for incident reporting"
  zencrepes_secret:
    type: env_var_name
    default: ZENCREPES_WEBHOOK_SECRET
    description: "ZenCrepes Webhook secret"
  testrail_project:
    type: string
    default: "Default"
    description: "Testrail Project to send data to"
  testrail_milestone:
    type: string
    default: "Default"
    description: "Milestone to be used when submitting the results to Testrail"
  testrail_username:
    type: env_var_name
    default: TESTRAIL_USERNAME
    description: "Testrail Username"
  testrail_password:
    type: env_var_name
    default: TESTRAIL_PASSWORD
    description: "Testtrail Password"
  ci_startup_script:
    type: string
    default: "ci.startup.sh"
    description: "Startup script to use in-lieu of docker-compose up."
  ci_postrun_script:
    type: string
    default: "ci.postrun.sh"
    description: "Script to run prior to saving the artifacts"
  no_output_timeout:
    type: string
    default: "10m"
    description: "Elapsed time the command can run without output. Since different modules are going to have different runtime, this allow fine-tuning per module."

working_directory: << parameters.working_directory >>

resource_class: << parameters.resource_class >>

machine:
  image: << parameters.machine_image >>
  docker_layer_caching: true

steps:
  - attach_workspace:
      at: .
  - run:
      name: Display size of the workspace folders before running job (for space optimization)
      command: du -h -d 1 << parameters.working_directory >>
  - run:
      name: Install nodeJS on machine executor
      command: |
        set +e
        export NVM_DIR="/opt/circleci/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install v12
        nvm alias default v12
  - integration-tests:
      parent_executor: "machine"
      working_directory: << parameters.working_directory >>
      primary_release_branch: << parameters.primary_release_branch >>
      nexus_username: << parameters.nexus_username >>
      nexus_password: << parameters.nexus_password >>
      docker_username: << parameters.docker_username >>
      docker_password: << parameters.docker_password >>
      docker_compose_file: << parameters.docker_compose_file >>
      tests_path: << parameters.tests_path >>
      tests_manifest: << parameters.tests_manifest >>
      jahia_image: << parameters.jahia_image >>
      jahia_superuser_password: << parameters.jahia_superuser_password >>
      jahia_cluster_enabled: << parameters.jahia_cluster_enabled >>
      tests_image: << parameters.tests_image >>
      tests_container_name: << parameters.tests_container_name >>
      tests_container_branch: << parameters.tests_container_branch >>
      jahia_license: << parameters.jahia_license >>
      jcustomer_image: << parameters.jcustomer_image >>
      elasticsearch_image: << parameters.elasticsearch_image >>
      module_id: << parameters.module_id >>
      should_skip_artifacts: << parameters.should_skip_artifacts >>
      should_skip_testrail: << parameters.should_skip_testrail >>
      should_skip_notifications: << parameters.should_skip_notifications >>
      slack_webhook_notifications: << parameters.slack_webhook_notifications >>
      slack_webhook_notifications_all: << parameters.slack_webhook_notifications_all >>
      should_skip_zencrepes: << parameters.should_skip_zencrepes >>
      should_build_testsimage: << parameters.should_build_testsimage >>
      zencrepes_secret: << parameters.zencrepes_secret >>
      incident_service: << parameters.incident_service >>
      testrail_project: << parameters.testrail_project >>
      testrail_milestone: << parameters.testrail_milestone >>
      testrail_username: << parameters.testrail_username >>
      testrail_password: << parameters.testrail_password >>
      ci_startup_script: << parameters.ci_startup_script >>
      ci_postrun_script: << parameters.ci_postrun_script >>
      no_output_timeout: << parameters.no_output_timeout >>
  - run:
      name: Display size of the workspace after folders running job (for space optimization)
      command: du -h -d 1 << parameters.working_directory >>
