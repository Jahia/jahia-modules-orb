description: >
  Perform static code analysis (currently for Javascript codebases)
  Linting, security analysis (audit-ci)

parameters:
  primary_release_branch:
    type: string
    default: "main"
    description: "Name of the primary release branch (master, main, ...)"
  base_image:
    type: string
    default: "cimg/node:lts"
    description: "Base docker image to be used for running the job"
  resource_class:
    type: string
    default: "large"
    description: "CircleCI resource_class (small, medium, large, xlarge, ...)"
  working_directory:
    type: string
    default: "~/source"
    description: "Working directory for the job"
  module_path:
    type: string
    default: "./"
    description: "Path to the module"
  tests_path:
    type: string
    default: "tests/"
    description: "Path to the integration tests"
  max_warning:
    type: string
    default: "1"
    description: "Maximum number of warning before failing the linting step"
  auditci_level:
    type: string
    default: "moderate"
    description: "Security level to check against for the module codebase, will fail the step if higher"
  auditci_level_tests:
    type: string
    default: "critical"
    description: "Security level to check against for the tests codebase, will fail the step if higher"

working_directory: << parameters.working_directory >>

resource_class: << parameters.resource_class >>

docker:
  - image: << parameters.base_image >>

steps:
  - attach_workspace:
      at: .
  - run:
      name: Display size of the workspace before running job (for space optimization)
      command: du -h -d 1 << parameters.working_directory >>
  - run:
      name: Run yarn if package.json exists in module folder
      command: |
        if [[ -d << parameters.module_path >> && -e "<< parameters.module_path >>package.json" ]]; then
          cd << parameters.module_path >>
          yarn
        fi
  - run:
      name: Run yarn if packages.json exists in test folder
      command: |
        if [[ -d << parameters.tests_path >> && -e "<< parameters.tests_path >>package.json" ]]; then
          cd << parameters.tests_path >>
          yarn
        fi
  - lint:
      module_path: << parameters.module_path >>
      tests_path: << parameters.tests_path >>
      max_warning: << parameters.max_warning >>
  - security:
      module_path: << parameters.module_path >>
      tests_path: << parameters.tests_path >>
      auditci_level: << parameters.auditci_level >>
      auditci_level_tests: << parameters.auditci_level_tests >>
