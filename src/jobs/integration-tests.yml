description: >
  Runs the integration testing suite
  The test container must contain a folder at: /home/jahians/results, this folder must contain:
   - A marker file (test_success or test_failure) indicating the outcome of the run
   - Run reports, in json format, in a reports/ folder
   - Run reports, in XML format, in a xml_reports/ folder
   - A installed-jahia-modules.json generated by jahia-reporter and containing installed modules

parameters:
  resource_class:
    type: string
    default: "xlarge"
    description: "CircleCI resource_class (small, medium, large, xlarge, ...)"
  working_directory:
    type: string
    default: "~/source"
    description: "Working directory for the job"
  primary_release_branch:
    type: string
    default: "main"
    description: "Primary release branch"
  nexus_username:
    type: env_var_name
    default: NEXUS_USERNAME
    description: "Nexus Username"
  nexus_password:
    type: env_var_name
    default: NEXUS_PASSWORD
    description: "Nexus Password"
  docker_username:
    type: env_var_name
    default: DOCKERHUB_LOGIN
    description: "Docker registry Username"
  docker_password:
    type: env_var_name
    default: DOCKERHUB_PASSWORD
    description: "Docker registry Password"
  docker_compose_file:
    type: string
    default: "docker-compose.yml"
    description: "Filename for docker-compose yaml file"
  tests_path:
    type: string
    default: "tests/"
    description: "Folder containing the docker-compose.yml"
  tests_manifest:
    type: string
    description: "Manifest contraining the provisioning script"
  jahia_image:
    type: string
    default: ""
    description: "Full path to a Jahia image (org/repo:tag)"
  jahia_superuser_password:
    type: string
    default: "root1234"
    description: "Jahia root password"
  tests_image:
    type: string
    default: "modules-tests"
    description: "Full path to the Tests image (org/repo:tag)"
  tests_container_name:
    type: string
    default: "cypress"
    description: "Name of the tests container in the docker-compose file"
  tests_container_branch:
    type: string
    default: ""
    description: "Branch containing the tests (if different from current)"
  jahia_license:
    type: env_var_name
    default: JAHIA_LICENSE_801_FULL
    description: "Base64 encoded License"
  jcustomer_image:
    type: string
    default: ""
    description: "Full path to a JCustomer image (org/repo:tag)"
  elasticsearch_image:
    type: string
    default: "docker.elastic.co/elasticsearch/elasticsearch:7.10.2"
    description: "Full path to an Elasticsearch image (org/repo:tag)"
  module_id:
    type: string
    description: "ID of the module"
  should_skip_artifacts:
    type: boolean
    default: false
    description: "Should build artifacts be copied in the test container"
  should_skip_testrail:
    type: boolean
    default: true
    description: "Should the submission to Testrail be skipped ?"
  should_skip_notifications:
    type: boolean
    default: true
    description: "Should slack notifications be skipped ?"
  slack_webhook_notifications:
    type: env_var_name
    default: SLACK_WEBHOOK_QA_NOTIFICATIONS
    description: "Webhook to be used for failyre notifications"
  slack_webhook_notifications_all:
    type: env_var_name
    default: SLACK_WEBHOOK_QA_NOTIFICATIONS_ALL
    description: "Webhook to be used for all notifications (failure and success)"
  should_skip_zencrepes:
    type: boolean
    default: false
    description: "Should zencrepes notifications be skipped ?"
  zencrepes_secret:
    type: env_var_name
    default: ZENCREPES_WEBHOOK_SECRET
    description: "ZenCrepes Webhook secret"
  testrail_project:
    type: string
    default: "Default"
    description: "Testrail Project to send data to"
  testrail_milestone:
    type: string
    default: "Default"
    description: "Milestone to be used when submitting the results to Testrail"
  testrail_username:
    type: env_var_name
    default: TESTRAIL_USERNAME
    description: "Testrail Username"
  testrail_password:
    type: env_var_name
    default: TESTRAIL_PASSWORD
    description: "Testtrail Password"

working_directory: << parameters.working_directory >>

resource_class: << parameters.resource_class >>

docker:
  - image: cimg/openjdk:8.0.275-node

steps:
  - attach_workspace:
      at: .
  - setup_remote_docker:
      docker_layer_caching: true
  # Set the environment variables necessary for the docker-compose run
  # These are declared here to avoid having to repeat in multiple steps
  - run:
      name: Set environment variables from parameters
      command: |
        echo "export MANIFEST=<< parameters.tests_manifest >>" >> $BASH_ENV
        echo "export JAHIA_IMAGE=<< parameters.jahia_image >>" >> $BASH_ENV
        echo "export JAHIA_LICENSE=<< parameters.jahia_license >>" >> $BASH_ENV
        echo "export TESTS_IMAGE=<< parameters.tests_image >>" >> $BASH_ENV
        echo "export JCUSTOMER_IMAGE=<< parameters.jcustomer_image >>" >> $BASH_ENV
        echo "export ELASTICSEARCH_IMAGE=<< parameters.elasticsearch_image >>" >> $BASH_ENV
        echo "export NEXUS_USERNAME=${<< parameters.nexus_username >>}" >> $BASH_ENV
        echo "export NEXUS_PASSWORD=${<< parameters.nexus_password >>}" >> $BASH_ENV
  - run:
      name: Displaying important environment variables
      command: |
        echo "MANIFEST=${MANIFEST}"
        echo "JAHIA_IMAGE=${JAHIA_IMAGE}"
        echo "TESTS_IMAGE=${TESTS_IMAGE}"
        echo "JCUSTOMER_IMAGE=${JCUSTOMER_IMAGE}"
        echo "ELASTICSEARCH_IMAGE=${ELASTICSEARCH_IMAGE}"
  - run:
      name: Preparing export folder
      command: |
        if [ ! -d << parameters.tests_path >>artifacts ]; then
          mkdir -p << parameters.tests_path >>artifacts
        fi
  # Login to the docker registry is needed to access some images (snapshots, ...)
  - run:
      name: Docker login
      command: |
        echo "${<< parameters.docker_username >>}"
        echo "${<< parameters.docker_password >>}" | docker login -u "${<< parameters.docker_username >>}" --password-stdin

  - run:
      name: Preparing build artifacts
      command: |
        if [ << parameters.should_skip_artifacts >> == false ]; then
          sudo cp -r /home/circleci/source/target/*.jar << parameters.tests_path >>artifacts/
        fi

  # We always build the test container from scratch
  # Docker layer caching makes this quick if it was already previously built
  # To test a previous release, a specific branch can be provided
  - run:
      name: Build the tests image
      command: |
        cd << parameters.tests_path >>
        if [[ "<< parameters.tests_container_branch >>" != "" ]]; then
          git checkout << parameters.tests_container_branch >>
        fi
        docker build -t << parameters.tests_image >> .
        docker save -o tests_image.tar << parameters.tests_image >>

  # Pull the latest version of ${JAHIA_IMAGE}
  - run:
      name: Pull the latest version of Jahia and print docker images cache to console
      command: |
        cd << parameters.tests_path >>
        . ./set-env.sh
        echo "List of docker images in local cache PRIOR pull" > ./artifacts/docker.log
        docker images --digests --all 2>&1 | tee -a ./artifacts/docker.log
        echo "--------------------------------------------------" >> ./artifacts/docker.log
        docker pull ${JAHIA_IMAGE}
        echo "List of docker images in local cache AFTER pull" > ./artifacts/docker.log
        docker images --digests --all 2>&1 | tee -a ./artifacts/docker.log
        echo "--------------------------------------------------" >> ./artifacts/docker.log

  # Run a background task to display the running containers and their hash
  # This is used to verify that the right containers are running
  # Sleep 30s to give containers time to start
  - run:
      name: Print the currently running containers
      background: true
      command: |
        cd << parameters.tests_path >>
        sleep 30
        docker ps --all --no-trunc 2>&1 | tee -a ./artifacts/docker.log

  # Using abort-on-container-exit will exit on first container failure, which
  # for us will be the test container
  - run:
      name: Spin-up the containers
      command: |
        cd << parameters.tests_path >>
        export DOCKER_CLIENT_TIMEOUT=120
        export COMPOSE_HTTP_TIMEOUT=120
        . ./set-env.sh
        docker-compose -f << parameters.docker_compose_file >> up --abort-on-container-exit

  - run:
      name: Export containers artifacts (reports, secreenshots, videos)
      when: always
      command: |
        cd << parameters.tests_path >>
        docker cp << parameters.tests_container_name >>:/home/jahians/results ./artifacts

  # Running logs with -t adds a timestamp, this might feel redundant with the timestamp provided
  # by directly jahia but this allows for easy comparison between various containers that might
  # have their timezone set differently
  - run:
      name: Export containers logs
      when: always
      command: |
        cd << parameters.tests_path >>
        docker-compose logs -t --tail="all" > ./artifacts/results/all-containers.log
        docker logs jahia > ./artifacts/results/jahia.log
        docker logs << parameters.tests_container_name >> > ./artifacts/results/<< parameters.tests_container_name >>.log
        cp ./artifacts/docker.log ./artifacts/results/

  # This is not needed since cypress is going to terminat on failure with exit code 1
  - run:
      name: Analyze Test results
      when: always
      # This looks at the report and fail the job if one of the test has failed
      command: |
        cd << parameters.tests_path >>
        if [[ ! -e ./artifacts/results/test_success ]]; then
          echo "More than one failure found, sending exit signal"
          exit 1
        fi
  - store_test_results:
      path: << parameters.tests_path >>artifacts/results/xml_reports
  - run:
      name: remove xml results folder
      when: always
      command: rm -rf << parameters.tests_path >>artifacts/results/xml_reports
  - store_artifacts:
      path: << parameters.tests_path >>artifacts/results
  # Once all is executed, results are submitted to external platforms
  # Testrail report and Slack (failure only) notifications are sent during scheduled executions or merged into the main branch
  - run:
      name: Install jahia-reporter
      when: always
      command: sudo npm install -g jahia-reporter
  - run:
      name: Publish results to testrail
      when: always
      command: |
        if [ << parameters.should_skip_testrail >> == false ] || [ << parameters.primary_release_branch >> == $CIRCLE_BRANCH ]; then
          cd << parameters.tests_path >>
          jahia-reporter testrail \
            --testrailUsername=${<< parameters.testrail_username >>} \
            --testrailPassword=${<< parameters.testrail_password >>} \
            --sourcePath="artifacts/results/reports" \
            --sourceType="json" \
            --projectName="<< parameters.testrail_project >>" \
            --milestone="<< parameters.testrail_milestone >>" \
            --defaultRunDescription="This test was executed on circleci, $CIRCLE_BUILD_URL"
        fi
  - run:
      name: Send Notifications to Slack
      when: always
      command: |
        if [ << parameters.should_skip_notifications >> == false ] || [ << parameters.primary_release_branch >> == $CIRCLE_BRANCH ]; then
          cd << parameters.tests_path >>
          jahia-reporter slack \
            --webhook=${<< parameters.slack_webhook_notifications >>} \
            --webhookAll=${<< parameters.slack_webhook_notifications_all >>} \
            --skipSuccessful \
            --sourcePath="artifacts/results/reports" \
            --sourceType="json" \
            --moduleFilepath="artifacts/results/installed-jahia-modules.json" \
            --msgAuthor="CircleCI ($CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME)" \
            --runUrl=$CIRCLE_BUILD_URL
        fi
  - run:
      name: Send Test data to https://zencrepes.jahia.com
      when: always
      command: |
        if [ << parameters.should_skip_zencrepes >> == false ] || [ << parameters.primary_release_branch >> == $CIRCLE_BRANCH ]; then
          cd << parameters.tests_path >>
          jahia-reporter zencrepes \
            --webhook="https://zencrepes.jahia.com/zqueue/testing/webhook" \
            --webhookSecret=${<< parameters.zencrepes_secret >>} \
            --sourcePath="artifacts/results/reports" \
            --sourceType="json" \
            --moduleFilepath="artifacts/results/installed-jahia-modules.json" \
            --name="<< parameters.module_id >>" \
            --runUrl=$CIRCLE_BUILD_URL
        fi
